{"version":3,"sources":["components/Card.js","App.js","registerServiceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","src","url","alt","onClick","clicked","id","App","state","score","clickedItems","logos","shuffle","Object","toConsumableArray","_this","sort","Math","random","setState","console","log","indexOf","push","this","_this2","className","map","logo","title","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"sjgCAGe,SAASA,EAAKC,GACzB,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAMK,IAAKC,IAAI,OAAOC,QAAS,kBAAMP,EAAMQ,QAAQR,EAAMS,mBC6DhEC,6MA7DbC,MAAQ,CACNC,MAAO,EACPC,aAAc,GACdC,WAGFC,QAAU,WACR,IAAID,EAAKE,OAAAC,EAAA,EAAAD,CAAOE,EAAKP,MAAMG,OAC3BA,EAAMK,KAAK,kBAAMC,KAAKC,SAAW,KACjCH,EAAKI,SAAS,CACZR,aAIJN,QAAU,SAAAC,GAGR,GAFAc,QAAQC,IAAI,SACZD,QAAQC,IAAIf,GACRS,EAAKP,MAAME,aAAaY,QAAQhB,IAAO,EACzCS,EAAKI,SAAS,CACZV,MAAO,EACPC,aAAa,KAEfU,QAAQC,IAAI,YAET,CACH,IAAIX,EAAYG,OAAAC,EAAA,EAAAD,CAAOE,EAAKP,MAAME,cAClCA,EAAaa,KAAKjB,GAClBS,EAAKI,SAAS,CACZT,eACAD,MAAOM,EAAKP,MAAMC,MAAQ,IAE5BW,QAAQC,IAAI,SAEdN,EAAKH,8FAILY,KAAKZ,2CAKE,IAAAa,EAAAD,KACP,OACE1B,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,OACZF,KAAKhB,MAAMC,MACXe,KAAKhB,MAAMG,MAAMgB,IAAI,SAAAC,GAAI,OACxB9B,EAAAC,EAAAC,cAACJ,EAAD,CACES,QAASoB,EAAKpB,QACdC,GAAIsB,EAAKtB,GACTJ,IAAK0B,EAAK1B,IACV2B,MAAOD,EAAKC,MACZC,IAAKF,EAAKtB,eArDJyB,aCKZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBtC,QACfgC,UAAUC,cAAcQ,WAK1B7B,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrB6B,MAAM,SAAAC,GACL/B,QAAQ+B,MAAM,4CAA6CA,KChEjEC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,GAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,OAAQ,WAC9B,IAAMrB,EAAK,GAAAsB,OAAMH,GAAN,sBAEN1B,EAwCX,SAAiCO,GAE/BuB,MAAMvB,GACHI,KAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgB5C,QAAQ,cAG7CkB,UAAUC,cAAc0B,MAAMxB,KAAK,SAAAC,GACjCA,EAAawB,aAAazB,KAAK,WAC7BT,OAAOC,SAASkC,aAKpB/B,EAAgBC,KAGnBW,MAAM,WACL9B,QAAQC,IACN,mEAzDAiD,CAAwB/B,GAHxBD,EAAgBC,MC7BxBgC","file":"static/js/main.acaf6f2c.chunk.js","sourcesContent":["import React from 'react'\n\n\nexport default function Card(props) {\n    return (\n        <div>\n            <img src={props.url} alt=\"logo\" onClick={() => props.clicked(props.id)}/>\n        </div>\n    )\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Card from \"./components/Card\"\nimport logos from \"./logos.json\"\n\nclass App extends Component {\n  state = {\n    score: 0,\n    clickedItems: [],\n    logos\n  }\n\n  shuffle = () => {\n    let logos = [...this.state.logos]\n    logos.sort(() => Math.random() - 0.5);\n    this.setState({\n      logos\n    })\n  }\n\n  clicked = id => {\n    console.log(\"hello\")\n    console.log(id)\n    if (this.state.clickedItems.indexOf(id) > -1) {\n      this.setState({ \n        score: 0,\n        clickedItems:[]\n       })\n      console.log(\"true\")\n    }\n    else {\n      let clickedItems = [...this.state.clickedItems]\n      clickedItems.push(id)\n      this.setState({\n        clickedItems,\n        score: this.state.score + 1\n      })\n      console.log(\"false\")\n    }\n    this.shuffle()\n  }\n\n  componentDidMount(){\n    this.shuffle()\n  }\n  \n\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.score}\n        {this.state.logos.map(logo => (\n          <Card\n            clicked={this.clicked}\n            id={logo.id}\n            url={logo.url}\n            title={logo.title}\n            key={logo.id}\n          />\n        ))}\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}